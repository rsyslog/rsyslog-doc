.. index:: ! helloworld

Hello world
###########

Supposed you already read :doc:`<overview>` you are ready for some real work.

Before starting playing with logs, you should know how to get Rsyslog running on your system. 
That's what :doc:`<installation>` page is for.
For the sake of brevity, we'll suppose you have already rsyslog installed on your system and
that you have a few log files to process.

**Remember**: Rsyslog expect syslog-formatted messages by default, so it will be much better if your lines look like:

    <34>Jan 01 10:10:00 hostname tag: hello world

Rsyslog configuration is located by default at **/etc/rsyslog.conf** but as many other services,
you can place several files under **/etc/rsyslog.d/** and include them using *IncludeConfig*.

In the following example we are going to process a couple of files and generate some alerts based on contents.
As you probably will notice, there are two :doc:`<syntax>`: Legacy -prefixed with $- and new (rainerscript).
Legacy is simpler for simple tests, but it's recommended to use the newer once you are familiar with Rsyslog, 
as it's the only one that will support **all** future features.

Here's the configuration file:

.. code:: 

   # This is a configuration example.
   # As you can guess, comments are prefixed by #
   # Rsyslog read this file from top to bottom, so order matters
   #   You can't -for example- use a module if you haven't loaded it before.


   # Global directive set -suprise!- global settings
   global(
     # For example, this setting tuncate all output messages to 1KB
     maxMessageSize="1K"
     # And here we set the working directory where Rsyslog will store needed files.
     workDirectory="/data"
   )
   
   # You could also include configuration snippets. Remember: they are merged as they are declared!
   # $IncludeConfig /etc/rsyslog.d/another.conf
   
   
   # The first thing you may do is to load modules you are going to use
   
   # First we are going to load a module to write messages into a text file
   #   Although omfile is loaded by default, we write it anyway as an example
   module(load="builtin:omfile")
   
   # We are also loading imfile (input module to read from text files) using legacy syntax
   #   Remember: to use imfile you must build rsyslog with imfile support
   #   ie: Have a look at installation documentation!
   $ModLoad imfile
   
   # It will read foo.log
   $InputFileName /file.log
   # Set this events were generated by myapp
   $InputFileTag myapp
   # And add the above settings as a file monitor on rsyslog
   $InputRunFileMonitor
   
   
   # At this point, rsyslog will get messages from foo.log
   #   messages with a facility=local0 and severity=debug will be dropped/ignored
   local0.debug; ~
   #   you can also use filter like conditionals and variables (we'll get into that later) to drop messages from myhost
   if $hostname == 'myhost' then ~
   #   or basic functions to select messages containing error and apply a template (by now, think in "format")
   :msg, contains, "error";RSYSLOG_FileFormat

   # All the above messages, if not dropped, will be sent to bar.log
   TODO

   # Using newer syntax, we are going to read another bunch of files
   input(file="/logs/*.log")
   TODO
   # And ...
   action()
   
Hopefully you understood the above example. Anyway consider Rsyslog is a complex applications, with many features, 
and you'll have to dig around documentation and maybe ask for help. Don't worry: we will kindly help you!

Now it's time to run your configuration. It's is advised to understand :doc:`how rsyslog launch process work <loading>`, but for this example you won't need to.
To do so, run:

    rsyslogd -f /etc/rsyslog.conf -N

If everything is ok, you can run rsyslog normally and check if it's working as expected with:

    rsyslogd -n

Otherwise, if you got any problem, troubleshooting page will become your new best friend.

If you reached this line, you probably deserve a rest before reading about :doc:`basic concepts <basics>`.
